//line sql.y:19
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:54
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const ALL = 57360
const DISTINCT = 57361
const AS = 57362
const EXISTS = 57363
const ASC = 57364
const DESC = 57365
const INTO = 57366
const KEY = 57367
const DEFAULT = 57368
const SET = 57369
const VALUES = 57370
const LAST_INSERT_ID = 57371
const JOIN = 57372
const LEFT = 57373
const RIGHT = 57374
const INNER = 57375
const OUTER = 57376
const CROSS = 57377
const NATURAL = 57378
const ON = 57379
const USING = 57380
const ID = 57381
const HEX = 57382
const STRING = 57383
const INTEGRAL = 57384
const FLOAT = 57385
const HEXNUM = 57386
const VALUE_ARG = 57387
const LIST_ARG = 57388
const COMMENT = 57389
const NULL = 57390
const TRUE = 57391
const FALSE = 57392
const FULL = 57393
const COLUMNS = 57394
const OR = 57395
const AND = 57396
const NOT = 57397
const BETWEEN = 57398
const CASE = 57399
const WHEN = 57400
const THEN = 57401
const ELSE = 57402
const END = 57403
const LE = 57404
const GE = 57405
const NE = 57406
const IS = 57407
const LIKE = 57408
const REGEXP = 57409
const IN = 57410
const NULL_SAFE_NOTEQUAL = 57411
const SHIFT_LEFT = 57412
const SHIFT_RIGHT = 57413
const DIV = 57414
const MOD = 57415
const UNARY = 57416
const INTERVAL = 57417
const CREATE = 57418
const ALTER = 57419
const DROP = 57420
const RENAME = 57421
const ADD = 57422
const TABLE = 57423
const INDEX = 57424
const TO = 57425
const IGNORE = 57426
const IF = 57427
const UNIQUE = 57428
const PRIMARY = 57429
const COLUMN = 57430
const CONSTRAINT = 57431
const FOREIGN = 57432
const SHOW = 57433
const DESCRIBE = 57434
const DATE = 57435
const ESCAPE = 57436
const EXPLAIN = 57437
const TINYINT = 57438
const SMALLINT = 57439
const MEDIUMINT = 57440
const INT = 57441
const INTEGER = 57442
const BIGINT = 57443
const INTNUM = 57444
const REAL = 57445
const DOUBLE = 57446
const FLOAT_TYPE = 57447
const DECIMAL = 57448
const NUMERIC = 57449
const TIME = 57450
const TIMESTAMP = 57451
const DATETIME = 57452
const YEAR = 57453
const CHAR = 57454
const VARCHAR = 57455
const BOOL = 57456
const NCHAR = 57457
const TEXT = 57458
const TINYTEXT = 57459
const MEDIUMTEXT = 57460
const LONGTEXT = 57461
const BLOB = 57462
const TINYBLOB = 57463
const MEDIUMBLOB = 57464
const LONGBLOB = 57465
const AUTO_INCREMENT = 57466
const SIGNED = 57467
const UNSIGNED = 57468
const ZEROFILL = 57469
const TABLES = 57470
const CURRENT_TIMESTAMP = 57471
const CURRENT_DATE = 57472
const CURRENT_TIME = 57473
const REPLACE = 57474
const CAST = 57475
const SUBSTR = 57476
const GROUP_CONCAT = 57477
const SEPARATOR = 57478
const UNUSED = 57479

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"KEY",
	"DEFAULT",
	"SET",
	"VALUES",
	"LAST_INSERT_ID",
	"JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"FULL",
	"COLUMNS",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"NULL_SAFE_NOTEQUAL",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"INTERVAL",
	"'.'",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ADD",
	"TABLE",
	"INDEX",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"EXPLAIN",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"AUTO_INCREMENT",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"TABLES",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"REPLACE",
	"CAST",
	"SUBSTR",
	"GROUP_CONCAT",
	"SEPARATOR",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 17,
	-2, 4,
	-1, 116,
	1, 157,
	5, 157,
	11, 157,
	12, 157,
	13, 157,
	14, 157,
	16, 157,
	27, 157,
	30, 157,
	31, 157,
	33, 157,
	35, 157,
	36, 157,
	37, 157,
	38, 157,
	40, 157,
	41, 157,
	155, 157,
	-2, 170,
	-1, 185,
	92, 357,
	-2, 353,
	-1, 186,
	92, 358,
	-2, 354,
	-1, 405,
	5, 17,
	-2, 326,
	-1, 522,
	92, 360,
	-2, 356,
	-1, 554,
	5, 18,
	-2, 229,
	-1, 612,
	5, 18,
	-2, 327,
	-1, 675,
	5, 17,
	-2, 329,
	-1, 735,
	5, 18,
	-2, 330,
}

const yyPrivate = 57344

const yyLast = 4188

var yyAct = [...]int{

	186, 384, 626, 138, 537, 462, 32, 538, 172, 517,
	409, 432, 144, 101, 590, 431, 492, 437, 529, 47,
	208, 521, 170, 95, 95, 338, 443, 121, 477, 549,
	188, 467, 408, 433, 209, 3, 458, 212, 451, 95,
	31, 45, 199, 136, 428, 149, 718, 140, 113, 134,
	631, 632, 633, 569, 450, 112, 519, 634, 630, 111,
	124, 99, 355, 354, 364, 365, 357, 358, 359, 360,
	361, 362, 363, 356, 708, 706, 340, 469, 468, 109,
	445, 125, 468, 687, 128, 95, 641, 85, 86, 445,
	95, 123, 722, 91, 260, 130, 591, 122, 255, 254,
	25, 27, 15, 16, 644, 84, 563, 615, 597, 95,
	547, 190, 151, 481, 383, 135, 356, 22, 95, 95,
	95, 173, 26, 127, 344, 95, 546, 670, 95, 530,
	95, 95, 87, 29, 343, 342, 95, 89, 88, 133,
	342, 191, 359, 360, 361, 362, 363, 356, 26, 253,
	344, 116, 635, 264, 444, 344, 106, 262, 442, 441,
	117, 688, 686, 444, 100, 377, 378, 379, 380, 381,
	357, 358, 359, 360, 361, 362, 363, 356, 567, 141,
	189, 398, 399, 530, 251, 604, 346, 18, 19, 20,
	485, 487, 488, 337, 95, 401, 195, 486, 95, 95,
	95, 95, 21, 23, 400, 690, 24, 95, 499, 345,
	129, 95, 424, 425, 95, 343, 342, 447, 47, 411,
	347, 497, 498, 496, 448, 343, 342, 405, 26, 734,
	116, 344, 689, 572, 599, 583, 584, 585, 571, 210,
	436, 344, 410, 28, 570, 426, 438, 414, 422, 416,
	385, 427, 628, 413, 391, 415, 464, 723, 724, 375,
	122, 95, 95, 564, 453, 454, 515, 374, 376, 465,
	343, 342, 343, 342, 139, 455, 456, 457, 729, 672,
	29, 728, 683, 682, 460, 461, 344, 470, 344, 636,
	495, 523, 382, 474, 139, 386, 387, 388, 389, 429,
	392, 639, 638, 610, 393, 394, 395, 614, 139, 29,
	116, 116, 116, 116, 406, 523, 139, 197, 139, 117,
	117, 117, 117, 116, 218, 217, 197, 350, 545, 353,
	475, 637, 210, 33, 545, 366, 367, 368, 369, 370,
	371, 47, 351, 352, 349, 372, 355, 354, 364, 365,
	357, 358, 359, 360, 361, 362, 363, 356, 493, 474,
	474, 491, 600, 479, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 474,
	557, 25, 47, 25, 396, 25, 452, 463, 524, 355,
	354, 364, 365, 357, 358, 359, 360, 361, 362, 363,
	356, 522, 403, 404, 516, 674, 436, 47, 621, 560,
	459, 411, 196, 539, 29, 411, 29, 520, 29, 482,
	483, 426, 489, 490, 573, 197, 411, 535, 41, 543,
	554, 12, 47, 527, 526, 555, 536, 553, 531, 550,
	551, 541, 419, 558, 139, 552, 420, 421, 204, 410,
	532, 533, 534, 544, 436, 201, 204, 418, 202, 417,
	203, 205, 494, 385, 525, 566, 105, 727, 726, 562,
	95, 561, 466, 189, 257, 207, 95, 137, 107, 47,
	355, 354, 364, 365, 357, 358, 359, 360, 361, 362,
	363, 356, 102, 411, 697, 574, 579, 103, 26, 522,
	578, 479, 33, 582, 436, 493, 556, 580, 386, 696,
	587, 588, 589, 586, 643, 520, 576, 36, 577, 593,
	429, 594, 261, 131, 201, 204, 540, 202, 26, 203,
	205, 550, 551, 38, 39, 606, 607, 608, 609, 119,
	35, 37, 97, 98, 611, 612, 613, 603, 30, 1,
	90, 616, 625, 440, 430, 120, 617, 40, 47, 439,
	47, 47, 685, 629, 446, 522, 568, 449, 411, 622,
	436, 624, 565, 623, 95, 595, 221, 222, 220, 224,
	436, 619, 436, 627, 601, 223, 219, 652, 116, 691,
	206, 410, 211, 476, 42, 373, 108, 117, 47, 649,
	598, 680, 645, 542, 647, 648, 650, 605, 669, 494,
	397, 187, 695, 668, 642, 47, 47, 385, 673, 539,
	436, 602, 47, 618, 47, 390, 528, 620, 150, 484,
	679, 651, 160, 157, 159, 558, 158, 677, 678, 147,
	402, 47, 596, 348, 681, 47, 436, 148, 675, 142,
	115, 192, 171, 200, 700, 198, 701, 548, 114, 699,
	473, 717, 704, 436, 411, 14, 684, 436, 34, 110,
	11, 10, 715, 17, 693, 93, 93, 9, 651, 720,
	8, 671, 7, 539, 47, 6, 725, 694, 5, 4,
	104, 93, 702, 13, 703, 2, 705, 0, 707, 731,
	709, 710, 711, 712, 713, 714, 627, 118, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 47, 47, 735, 0, 0, 0, 732,
	92, 96, 540, 0, 0, 676, 738, 93, 0, 0,
	0, 667, 93, 0, 0, 736, 737, 0, 0, 719,
	354, 364, 365, 357, 358, 359, 360, 361, 362, 363,
	356, 93, 692, 0, 0, 0, 0, 0, 0, 0,
	93, 214, 93, 730, 385, 0, 0, 93, 0, 0,
	93, 0, 93, 93, 0, 0, 0, 0, 263, 341,
	0, 0, 126, 0, 0, 0, 540, 132, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 0, 0,
	663, 664, 665, 662, 0, 666, 194, 0, 0, 0,
	656, 0, 659, 661, 655, 0, 653, 216, 0, 657,
	716, 139, 252, 0, 0, 256, 0, 258, 259, 658,
	660, 0, 0, 0, 0, 0, 93, 0, 0, 412,
	93, 93, 93, 93, 0, 0, 0, 0, 0, 423,
	646, 0, 0, 93, 0, 0, 214, 355, 354, 364,
	365, 357, 358, 359, 360, 361, 362, 363, 356, 0,
	355, 354, 364, 365, 357, 358, 359, 360, 361, 362,
	363, 356, 0, 68, 0, 518, 0, 146, 0, 0,
	0, 407, 145, 0, 178, 60, 0, 0, 0, 0,
	0, 0, 0, 93, 93, 29, 0, 0, 185, 162,
	161, 163, 164, 165, 166, 592, 0, 167, 168, 169,
	0, 0, 0, 0, 143, 155, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 355, 354, 364, 365, 357,
	358, 359, 360, 361, 362, 363, 356, 152, 153, 339,
	0, 0, 0, 183, 0, 154, 0, 156, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	69, 0, 0, 57, 0, 0, 52, 0, 0, 77,
	72, 64, 58, 59, 48, 0, 70, 55, 56, 54,
	67, 74, 75, 53, 82, 51, 81, 50, 66, 73,
	78, 65, 62, 49, 76, 63, 61, 0, 71, 79,
	83, 0, 179, 180, 181, 184, 174, 175, 176, 0,
	80, 0, 0, 0, 0, 341, 263, 0, 0, 68,
	0, 412, 0, 0, 0, 412, 341, 341, 341, 0,
	0, 60, 0, 0, 0, 235, 412, 0, 240, 241,
	242, 243, 244, 245, 46, 246, 247, 248, 249, 250,
	236, 237, 238, 239, 225, 226, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 364, 365, 357, 358,
	359, 360, 361, 362, 363, 356, 0, 0, 0, 355,
	354, 364, 365, 357, 358, 359, 360, 361, 362, 363,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 412, 0, 0, 69, 341, 93, 57,
	0, 0, 52, 0, 263, 77, 72, 64, 58, 59,
	48, 0, 70, 55, 56, 54, 67, 74, 75, 53,
	82, 51, 81, 50, 66, 73, 78, 65, 62, 49,
	76, 63, 61, 0, 71, 79, 83, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 80, 575, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 412, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 46, 0, 434, 435, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 559, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 46, 0, 434, 435, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 29,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 0, 321, 80, 329, 320, 299, 331, 280,
	291, 335, 292, 293, 314, 271, 307, 68, 0, 283,
	267, 289, 268, 281, 301, 304, 279, 322, 333, 60,
	303, 305, 319, 298, 315, 274, 309, 312, 332, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 328, 290, 0, 0, 313, 266, 310, 0,
	270, 272, 334, 326, 286, 287, 0, 0, 0, 0,
	0, 0, 302, 306, 316, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 308, 0, 0,
	0, 300, 0, 273, 0, 285, 317, 265, 324, 297,
	327, 295, 294, 330, 69, 0, 0, 57, 323, 282,
	52, 288, 336, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 269, 71, 79, 83, 325, 277, 275, 276, 318,
	0, 278, 68, 321, 80, 0, 146, 0, 0, 0,
	0, 145, 0, 178, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 185, 162, 161,
	163, 164, 165, 166, 0, 0, 167, 168, 169, 0,
	0, 0, 0, 143, 155, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 153, 339, 0,
	0, 0, 183, 0, 154, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 69,
	0, 0, 57, 0, 0, 52, 0, 0, 77, 72,
	64, 58, 59, 48, 0, 70, 55, 56, 54, 67,
	74, 75, 53, 82, 51, 81, 50, 66, 73, 78,
	65, 62, 49, 76, 63, 61, 0, 71, 79, 83,
	0, 179, 180, 181, 184, 174, 175, 176, 68, 80,
	0, 0, 146, 0, 0, 0, 0, 145, 0, 178,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	29, 0, 139, 185, 162, 161, 163, 164, 165, 166,
	0, 0, 167, 168, 169, 0, 0, 0, 0, 143,
	155, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 153, 0, 0, 0, 0, 183, 0,
	154, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 69, 0, 0, 57, 0,
	0, 52, 0, 0, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 0, 71, 79, 83, 25, 179, 180, 181,
	184, 174, 175, 176, 0, 80, 0, 68, 0, 0,
	0, 146, 0, 0, 0, 0, 145, 0, 178, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 185, 162, 161, 163, 164, 165, 166, 0,
	0, 167, 168, 169, 0, 0, 0, 0, 143, 155,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 153, 0, 0, 0, 0, 183, 0, 154,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 69, 0, 0, 57, 0, 0,
	52, 0, 0, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 0, 71, 79, 83, 0, 179, 180, 181, 184,
	174, 175, 176, 68, 80, 0, 0, 146, 0, 0,
	0, 0, 145, 0, 178, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 0, 0, 185, 162,
	161, 163, 164, 165, 166, 0, 0, 167, 168, 169,
	0, 0, 0, 0, 143, 155, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 153, 0,
	0, 0, 0, 183, 0, 154, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	69, 0, 0, 57, 0, 0, 52, 0, 0, 77,
	72, 64, 58, 59, 48, 0, 70, 55, 56, 54,
	67, 74, 75, 53, 82, 51, 81, 50, 66, 73,
	78, 65, 62, 49, 76, 63, 61, 0, 71, 79,
	83, 68, 179, 180, 181, 184, 174, 175, 176, 0,
	80, 0, 178, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 185, 162, 161, 163,
	164, 165, 166, 0, 0, 167, 168, 169, 0, 0,
	0, 0, 0, 155, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 153, 0, 0, 0,
	0, 183, 0, 154, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 69, 0,
	0, 57, 0, 0, 52, 0, 0, 77, 72, 64,
	58, 59, 48, 0, 70, 55, 56, 54, 67, 74,
	75, 53, 82, 51, 81, 50, 66, 73, 78, 65,
	62, 49, 76, 63, 61, 0, 71, 79, 83, 0,
	179, 180, 181, 184, 174, 175, 176, 68, 80, 0,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 480, 0, 0, 0, 25, 0,
	0, 0, 0, 0, 0, 0, 343, 342, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 57, 0, 0,
	52, 0, 0, 77, 72, 64, 58, 59, 48, 0,
	70, 55, 56, 54, 67, 74, 75, 53, 82, 51,
	81, 50, 66, 73, 78, 65, 62, 49, 76, 63,
	61, 0, 71, 79, 83, 0, 69, 0, 0, 57,
	0, 0, 52, 0, 80, 77, 72, 64, 58, 59,
	48, 0, 70, 55, 56, 54, 67, 74, 75, 53,
	82, 51, 81, 50, 66, 73, 78, 65, 62, 49,
	76, 63, 61, 25, 71, 79, 83, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 29, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 57, 0, 0, 52, 0, 0,
	77, 72, 64, 58, 59, 48, 0, 70, 55, 56,
	54, 67, 74, 75, 53, 82, 51, 81, 50, 66,
	73, 78, 65, 62, 49, 76, 63, 61, 0, 71,
	79, 83, 0, 69, 0, 0, 57, 0, 0, 52,
	0, 80, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	68, 71, 79, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 44, 69, 0, 0,
	57, 0, 0, 52, 0, 0, 77, 72, 64, 58,
	59, 48, 0, 70, 55, 56, 54, 67, 74, 75,
	53, 82, 51, 81, 50, 66, 73, 78, 65, 62,
	49, 76, 63, 61, 0, 71, 79, 83, 0, 69,
	0, 0, 57, 0, 0, 52, 0, 80, 77, 72,
	64, 58, 59, 48, 0, 70, 55, 56, 54, 67,
	74, 75, 53, 82, 51, 81, 50, 66, 73, 78,
	65, 62, 49, 76, 63, 61, 68, 71, 79, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 57, 0, 0, 52,
	0, 0, 77, 72, 64, 58, 59, 48, 0, 70,
	55, 56, 54, 67, 74, 75, 53, 82, 51, 81,
	50, 66, 73, 78, 65, 62, 49, 76, 63, 61,
	0, 71, 79, 83, 0, 69, 0, 0, 57, 0,
	0, 52, 0, 80, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 68, 71, 79, 83, 0, 0, 0, 193,
	0, 0, 0, 0, 60, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 57, 0, 0, 52, 0, 0, 77, 72,
	64, 58, 59, 48, 0, 70, 55, 56, 54, 67,
	74, 75, 53, 82, 51, 81, 50, 66, 73, 78,
	65, 62, 49, 76, 63, 61, 0, 71, 79, 83,
	0, 69, 0, 0, 57, 0, 0, 52, 0, 80,
	77, 72, 64, 58, 59, 48, 0, 70, 55, 56,
	54, 67, 74, 75, 53, 82, 51, 81, 50, 66,
	73, 78, 65, 62, 49, 76, 63, 61, 68, 71,
	79, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 57, 0,
	0, 52, 0, 0, 77, 72, 64, 58, 59, 48,
	0, 70, 55, 56, 54, 67, 74, 75, 53, 82,
	51, 81, 50, 66, 73, 78, 65, 62, 49, 76,
	63, 61, 0, 71, 79, 83, 0, 69, 0, 0,
	57, 0, 0, 52, 0, 80, 77, 72, 64, 58,
	59, 48, 0, 70, 55, 56, 54, 67, 74, 75,
	53, 82, 51, 81, 50, 66, 73, 78, 65, 62,
	49, 76, 63, 61, 0, 71, 79, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80,
}
var yyPact = [...]int{

	94, -1000, -115, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 488, 535, -1000, -1000, -1000, 389, 3493, 7,
	-11, 39, 4033, 4033, -1000, -1000, 379, 108, -1000, -1000,
	-1000, -1000, 476, 482, 379, 460, -22, -1000, 3659, 529,
	-1000, 218, -8, -21, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4033, -18, -18, -3, 513, 4033,
	-6, -1000, -1000, 23, -1000, -1000, -1000, -1000, 458, 233,
	-102, -1000, 2886, 2886, 488, -1000, 379, -1000, 3825, -1000,
	146, 385, 425, -1000, -1000, -1000, 455, 3327, 3369, 4033,
	284, -1000, 945, -21, 4033, 91, 2, 4033, 453, 4033,
	4033, -4, -1000, -1000, 512, 2340, 2475, -1000, -1000, -1000,
	-1000, 169, -1000, 2886, 269, 270, 270, -1000, -1000, -1000,
	-1000, -1000, 3014, 3014, 3014, 3014, 3014, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	270, 22, -1000, 2750, 270, 270, 270, 2886, 270, -1000,
	-1000, -1000, 270, 270, 270, -1000, -1000, 344, -1000, 159,
	476, 233, 375, 4033, -1000, -1000, 3991, 3659, 3659, 3659,
	3659, -1000, 429, 427, 412, 417, 4033, -1000, 277, 233,
	3327, -1000, -1000, 3701, -1000, -1000, 509, 1440, 55, 166,
	-89, -1000, -1000, 347, -1000, 347, 347, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 347, 347, 347, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 371, 371, 371, 348,
	348, 227, -1000, 451, -27, -23, -1000, -1000, -1000, -1000,
	4033, 4033, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 320, -1000, -1000,
	3150, 21, 2886, 2886, 139, 2886, 2886, 52, 3014, 241,
	148, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014,
	3014, 3014, 3014, 3014, 3014, 3014, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 224, -1000, 379, -1000, -1000, -1000,
	-1000, 1022, 876, 2190, 275, 78, 2750, 2886, 3991, 458,
	67, 78, 3991, 2475, 2475, 2475, 2886, -1000, -1000, -1000,
	-1000, -1000, -1000, 3991, 270, -1000, 3192, -1000, 288, -1000,
	60, -1000, 18, 425, 402, 494, -1000, -1000, -1000, -1000,
	407, -1000, -1000, -1000, -1000, -1000, 233, -1000, 488, 2886,
	340, 1290, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	370, 446, 64, 221, -1000, -1000, 439, -1000, 127, -91,
	-1000, -1000, 199, -1000, -1000, -1000, -1000, -1000, -1000, 193,
	-1000, -1000, -1000, 188, -1000, 387, -1000, 218, -1000, 4033,
	3991, -1000, -1000, 509, 2475, 3659, -1000, -1000, 3535, -1000,
	-1000, 1890, 52, 83, -1000, -1000, 184, -1000, -1000, 78,
	78, 312, -1000, -1000, -1000, -1000, 241, 3014, 3014, 3014,
	-15, 312, 868, 1007, 672, -1000, 59, 59, 28, 28,
	28, 28, 28, 89, 89, 233, -1000, 233, 2475, 339,
	270, 16, -1000, 2886, -1000, 214, 322, 2475, 121, -1000,
	2886, 233, 253, 253, 253, -1000, 294, 263, -1000, -1000,
	2611, 233, 267, 15, 488, 3991, 2886, 2190, -1000, -1000,
	2886, 369, -1000, -1000, -1000, 476, 78, 1440, -1000, 1440,
	3867, -1000, 210, -1000, -1000, -83, 6, -1000, -1000, -1000,
	248, 291, 261, 4033, -1000, -1000, -14, 502, -1000, 286,
	-1000, -1000, 12, -1000, -1000, -1000, -1000, -15, 312, 803,
	-1000, 3014, 3014, -1000, -1000, 253, 2475, 2040, 78, 697,
	3014, 319, 62, -1000, 2886, 216, -1000, -1000, -1000, -1000,
	270, -1000, -1000, 377, 3867, 3867, 476, -1000, 78, -1000,
	78, 3867, -1000, 1290, -1000, 242, -1000, 347, -1000, 58,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 187, -1000, 160,
	1740, 3991, 496, 479, 1590, -1000, 3014, 312, 312, -1000,
	233, -1000, 233, 347, -1000, 347, 348, 347, -42, 347,
	-43, 347, 347, 347, 347, 347, 347, -1000, 790, -107,
	-1000, 78, 2886, -1000, 270, -1000, 379, 0, -1000, -1000,
	217, -1000, -1000, 3867, -1000, -1000, 443, -1000, 442, 240,
	237, -1000, -1000, -1000, -1000, -1000, 2886, 2886, -1000, 312,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3014, 233, 185, 78,
	263, 233, 3867, 3867, -1000, -1000, -1000, -1000, -1000, -1000,
	78, 251, 403, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 695, 34, 431, 693, 690, 689, 688, 685, 682,
	680, 677, 673, 671, 670, 517, 669, 668, 665, 43,
	661, 14, 56, 9, 25, 76, 660, 20, 55, 48,
	658, 29, 657, 655, 42, 653, 707, 651, 650, 44,
	649, 647, 643, 640, 639, 12, 636, 634, 633, 632,
	629, 16, 1, 4, 8, 7, 628, 112, 45, 626,
	18, 625, 621, 614, 612, 6, 611, 30, 610, 13,
	603, 601, 32, 10, 596, 595, 123, 60, 594, 17,
	0, 22, 33, 28, 593, 652, 21, 37, 592, 590,
	589, 587, 586, 585, 579, 578, 577, 576, 38, 572,
	567, 566, 36, 5, 564, 563, 562, 27, 559, 26,
	557, 555, 554, 15, 11, 553, 2, 552, 31, 550,
	549, 548, 121, 3, 542, 541,
}
var yyR1 = [...]int{

	0, 120, 121, 121, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 6, 6, 18, 18, 18, 7, 8, 9, 9,
	12, 110, 111, 111, 111, 107, 92, 92, 92, 95,
	95, 93, 93, 93, 93, 93, 93, 94, 94, 94,
	94, 94, 96, 96, 96, 96, 96, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 98, 98, 102,
	102, 103, 103, 103, 100, 100, 101, 101, 104, 104,
	104, 99, 99, 99, 99, 99, 99, 105, 105, 106,
	106, 106, 106, 106, 108, 115, 115, 115, 115, 109,
	109, 117, 117, 116, 112, 112, 112, 113, 113, 113,
	114, 114, 114, 10, 10, 10, 118, 118, 11, 11,
	13, 13, 13, 13, 13, 119, 119, 14, 14, 14,
	125, 15, 16, 16, 17, 17, 19, 19, 23, 23,
	22, 22, 24, 24, 24, 24, 84, 84, 84, 83,
	83, 26, 27, 27, 28, 28, 29, 29, 29, 29,
	38, 71, 71, 30, 30, 30, 31, 31, 32, 32,
	89, 89, 88, 88, 88, 87, 87, 33, 33, 33,
	34, 34, 35, 35, 37, 37, 36, 36, 39, 39,
	25, 25, 25, 25, 25, 25, 25, 75, 75, 41,
	41, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 50, 50, 50, 50, 50, 50, 42, 42, 42,
	42, 42, 42, 42, 21, 21, 51, 51, 51, 57,
	52, 52, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 48, 48,
	48, 46, 46, 46, 46, 46, 46, 47, 47, 47,
	49, 49, 49, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	61, 61, 20, 20, 59, 59, 60, 62, 62, 58,
	58, 58, 44, 44, 44, 44, 44, 44, 44, 63,
	63, 64, 64, 65, 65, 66, 66, 67, 68, 68,
	68, 69, 69, 69, 69, 43, 43, 43, 43, 43,
	43, 70, 70, 70, 70, 53, 53, 55, 55, 54,
	56, 72, 72, 73, 76, 76, 77, 77, 74, 74,
	78, 78, 78, 81, 81, 82, 82, 85, 85, 86,
	86, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 122,
	123, 124, 90, 90, 90,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 8, 4, 1, 3, 1,
	3, 5, 6, 1, 1, 3, 8, 7, 2, 8,
	4, 4, 1, 3, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 0, 1, 0,
	2, 1, 2, 1, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 6, 8, 0, 1, 4, 4,
	4, 5, 3, 3, 5, 0, 1, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 3, 3,
	2, 1, 3, 4, 4, 3, 2, 4, 0, 1,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 6, 6, 8, 7, 5, 4, 1, 1, 1,
	4, 4, 4, 2, 1, 2, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 0, 2, 0, 3, 0, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -120, -1, -2, -6, -7, -8, -9, -10, -11,
	-13, -14, -3, -4, -18, 8, 9, -12, 93, 94,
	95, 108, 23, 109, 112, 6, -122, 7, 149, 39,
	-121, 155, -65, 14, -17, 5, -15, -125, -15, -15,
	-110, 39, -78, 98, 103, -81, 42, -80, 118, 137,
	131, 129, 110, 127, 123, 121, 122, 107, 116, 117,
	29, 140, 136, 139, 115, 135, 132, 124, 17, 104,
	120, 142, 114, 133, 125, 126, 138, 113, 134, 143,
	154, 130, 128, 144, 98, 98, 99, 93, 99, 98,
	-119, 54, -36, -85, 42, -80, -36, -124, -15, -2,
	56, -69, 16, 15, -5, -3, -122, 18, -74, 101,
	-16, -27, -28, -29, -30, -38, -57, -122, -36, 10,
	-111, -107, 42, 99, -77, 102, -36, -76, 102, -76,
	98, 10, -36, 145, 55, 92, -19, 19, -123, 41,
	149, -25, -40, 58, -45, 26, 21, -44, -41, -58,
	-56, -57, 81, 82, 89, 59, 91, -48, -46, -47,
	-49, 44, 43, 45, 46, 47, 48, 51, 52, 53,
	-81, -85, -54, -122, 150, 151, 152, 61, 28, 146,
	147, 148, 102, 87, 149, 42, -80, -66, -67, -25,
	-65, -2, -37, 24, -36, 50, 27, 40, -33, -34,
	-35, 30, 33, 35, 31, 36, -89, 20, -27, -2,
	-122, -88, -87, 20, -85, 44, -36, 41, 40, -92,
	-95, -97, -96, -93, -94, 129, 130, 133, 134, 135,
	136, 137, 138, 139, 140, 110, 125, 126, 127, 128,
	113, 114, 115, 116, 117, 118, 120, 121, 122, 123,
	124, -77, -36, 58, 97, 96, -36, 21, -36, -36,
	98, 10, -86, -85, -79, 97, 57, 20, 22, 141,
	60, 15, 61, 93, 35, 147, 148, 146, 151, 26,
	9, 23, 109, 19, 85, 95, 64, 65, 111, 21,
	53, 10, 12, 13, 102, 101, 75, 99, 33, 7,
	91, 24, 72, 30, 25, 31, 73, 16, 87, 36,
	58, 51, 37, 56, 14, 34, 74, 96, 149, 32,
	6, 153, 27, 108, 98, 145, 63, 100, 52, 5,
	103, 8, 38, 28, 62, 11, 112, -22, -24, 83,
	-25, -85, 57, 56, 72, 40, 17, -25, -42, 75,
	58, 73, 74, 60, 78, 77, 88, 81, 82, 83,
	84, 85, 86, 87, 79, 80, 66, 67, 68, 69,
	70, 71, 76, -75, -122, -57, -122, -45, -45, -45,
	-45, -45, -122, 92, -52, -25, -122, -122, -122, -122,
	-61, -25, -122, -122, -122, -122, 40, -68, 22, 23,
	-69, -123, -43, 27, 28, -2, -122, -36, -72, -73,
	-58, -81, -85, -28, -29, -28, -29, 30, 30, 30,
	34, 30, -34, -85, -123, -123, -2, -87, -39, 11,
	-112, -113, -114, -82, 44, 45, -81, -79, -107, -108,
	-115, 104, 103, -109, 99, 25, -104, 51, 58, -100,
	143, -98, 39, -98, -98, -98, -98, -98, -102, 39,
	-102, -102, -103, 39, -103, 42, 21, -118, 105, 100,
	-118, -36, -36, -26, 40, 10, -84, -83, 20, -81,
	44, 92, -25, -25, -50, 51, 58, 52, 53, -25,
	-25, -45, -51, -54, -57, 49, 75, 73, 74, 60,
	-45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
	-45, -45, -45, -45, -45, 42, -81, -23, 19, -22,
	-82, -86, -79, 40, -123, -25, -58, -19, -59, -60,
	62, -58, -22, -22, -22, -67, -72, -53, -55, -54,
	-122, -2, -70, -81, -39, 40, 66, 92, -32, -31,
	37, 38, -31, 30, -123, -65, -25, 40, -114, 66,
	39, 25, -109, 42, 42, -99, 26, 51, -101, 144,
	45, 45, 45, 37, -107, -36, -58, -39, -24, -27,
	-83, 83, -86, 51, 52, 53, -51, -45, -45, -45,
	-21, 111, 57, -123, -123, -22, -122, 92, -25, 20,
	40, -22, -62, -60, 64, -25, -123, -123, -123, -123,
	40, -123, -123, -123, 40, 92, -65, -73, -25, -82,
	-25, 39, -69, -113, -114, -117, -116, -81, 42, -105,
	141, 44, 45, 46, 51, 146, 41, 40, 41, 40,
	-36, 100, -63, 12, 92, -21, 57, -45, -45, -123,
	-23, -82, -91, 129, 110, 127, 123, 132, 142, 125,
	143, 126, 116, 113, 114, 115, 118, 44, -45, -65,
	65, -25, 63, -55, 28, -2, -122, -81, -81, -69,
	-71, -81, 41, 40, -98, -106, 104, 25, 103, 45,
	45, -90, -122, -82, -58, -64, 13, 15, 83, -45,
	-123, -123, -98, -98, -103, -98, 117, -98, 117, -98,
	-98, -98, -98, -98, -98, -123, 40, -20, 153, -25,
	-53, -2, 92, 40, 41, -116, 25, 25, 41, 41,
	-25, -52, -45, -123, 44, -123, -81, -81, -123,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 313, 0, 130, 130, 130, 0, 350, 0,
	0, 125, 0, 0, 471, 130, 0, 23, 24, 469,
	1, 3, 321, 0, 0, 134, 348, 132, 0, 0,
	28, 0, 0, 346, 351, 352, 353, 354, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 0, 344, 344, 0, 0, 0,
	0, 126, 127, 186, 357, 358, 128, 129, 136, 17,
	0, 13, 0, 0, 313, 19, 0, 135, 0, 349,
	131, 0, 152, 154, 155, 156, -2, 0, 172, 0,
	0, 32, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 123, 0, 0, 0, 137, 18, 470,
	25, 322, 190, 0, 195, 197, 0, 232, 233, 234,
	235, 236, 0, 0, 0, 0, 0, 254, 255, 256,
	257, 302, 303, 304, 305, 306, 307, 308, 199, 200,
	299, 0, 340, 0, 0, 0, 0, 290, 0, 267,
	268, 269, 0, 0, 0, -2, -2, 314, 315, 318,
	321, 17, 0, 0, 185, 133, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 171, 0, 17,
	0, 160, 173, 0, 175, 176, 188, 104, 0, 78,
	74, 37, 38, 67, 40, 67, 67, 59, 60, 61,
	62, 63, 64, 65, 66, 52, 67, 67, 67, 56,
	41, 42, 43, 44, 45, 46, 69, 69, 69, 71,
	71, 0, 30, 0, 116, 116, 118, 345, 119, 120,
	0, 0, 187, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 16, 140, 142,
	146, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 218, 219, 220,
	221, 222, 223, 196, 0, 210, 0, 249, 250, 251,
	252, 0, 138, 0, 0, 230, 0, 0, 0, 136,
	0, 291, 0, 0, 0, 0, 0, 317, 319, 320,
	14, 20, 21, 0, 0, -2, 0, 184, 188, 341,
	0, 299, 0, 153, 168, 0, 165, 178, 179, 180,
	0, 182, 183, 158, 159, 229, 17, 174, 313, 0,
	31, 105, 107, 110, 111, 112, 355, 356, 33, 34,
	0, 0, 0, 0, 99, 100, 81, 79, 0, 76,
	75, 39, 0, 57, 58, 53, 54, 55, 47, 0,
	48, 49, 50, 0, 51, 0, 347, 0, 117, 0,
	0, 121, 124, 188, 0, 0, 143, 147, 0, 149,
	150, 0, 191, 192, 194, 211, 0, 213, 215, 323,
	324, 201, 202, 226, 227, 228, 0, 0, 0, 0,
	224, 206, 0, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 0, 253, 0, 0, 139,
	300, 0, -2, 0, 339, 0, 0, 0, 297, 294,
	0, 0, 0, 0, 0, 316, 22, 325, 335, 337,
	0, 17, 0, 331, 313, 0, 0, 0, 163, 169,
	0, 0, 164, 181, -2, 321, 189, 0, 108, 0,
	0, 95, 0, 97, 98, 87, 0, 80, 36, 77,
	0, 0, 0, 0, 113, 114, 0, 309, 141, 151,
	148, 144, 0, 212, 214, 216, 203, 224, 207, 0,
	204, 0, 0, 198, 258, 0, 138, 0, 231, 0,
	0, 313, 0, 295, 0, 0, 266, 270, 271, 272,
	0, 338, -2, 0, 0, 0, 321, 342, 343, 300,
	166, 0, 27, 106, 109, 0, 101, 67, 96, 89,
	88, 82, 83, 84, 85, 86, 68, 0, 72, 0,
	472, 0, 311, 0, 0, 205, 0, 225, 208, 259,
	0, 301, 0, 67, 274, 67, 71, 67, 278, 67,
	281, 67, 67, 67, 67, 67, 67, 289, 0, 292,
	265, 298, 0, 336, 0, -2, 0, 333, 332, 26,
	0, 161, 94, 0, 103, 35, 0, 91, 93, 0,
	0, 29, 473, 474, 115, 15, 0, 0, 145, 209,
	260, 261, 273, 275, 276, 277, 279, 280, 282, 283,
	284, 285, 286, 287, 288, 262, 0, 0, 0, 296,
	328, 17, 0, 0, 167, 102, 90, 92, 70, 73,
	312, 310, 0, 264, 293, -2, 334, 162, 263,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 59, 3, 3, 3, 86, 78, 3,
	39, 41, 83, 81, 40, 82, 92, 84, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 155,
	67, 66, 68, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 77, 3, 89,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 60, 61, 62, 63, 64, 65,
	69, 70, 71, 72, 73, 74, 75, 76, 79, 80,
	85, 87, 90, 91, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:244
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:249
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:250
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:254
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:268
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			yyVAL.selStmt = sel
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:275
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit}
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:282
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), GroupBy: GroupBy(yyDollar[7].exprs), Having: NewWhere(HavingStr, yyDollar[8].expr)}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:286
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:292
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:296
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:306
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:313
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			yyVAL.statement = ins
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:323
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:335
		{
			yyVAL.str = InsertStr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.str = ReplaceStr
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.str = ReplaceStr
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:349
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:355
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:361
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:366
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:373
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:380
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:387
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:392
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:396
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:402
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:411
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:421
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:553
		{
			yyVAL.optVal = nil
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:557
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:562
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:566
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:574
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:578
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:584
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:592
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:601
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:605
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:611
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:615
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:619
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:624
		{
			yyVAL.optVal = nil
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:628
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:632
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:636
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:644
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:649
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:658
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:662
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:666
		{
			yyVAL.colKeyOpt = colKey
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:670
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:680
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:686
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:690
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:698
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:708
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:714
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:718
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:724
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.str = ""
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:737
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:745
		{
			yyVAL.str = yyDollar[1].str
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:749
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:753
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:759
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:763
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:773
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:777
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[6].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:782
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:788
		{
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:792
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:800
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropIndexStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:810
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowCreate: true, OnTable: yyDollar[4].tableName}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[5].tableName}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:818
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[3].tableName}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:822
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:826
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[5].tableName}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:831
		{
			yyVAL.bytes = nil
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.bytes = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[2].tableName}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[2].tableName}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:849
		{
			yyVAL.statement = &Explain{}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:854
		{
			setAllowComments(yylex, true)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:864
		{
			yyVAL.bytes2 = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.str = UnionStr
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.str = UnionAllStr
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:883
		{
			yyVAL.str = ""
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.str = DistinctStr
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:892
		{
			yyVAL.selectExprs = nil
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:896
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:906
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:916
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:920
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:924
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:929
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:937
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:944
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:950
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:956
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:960
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:978
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:982
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:988
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.empty = struct{}{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.empty = struct{}{}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.str = JoinStr
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.str = InnerJoinStr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.str = CrossJoinStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.str = LeftJoinStr
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.str = LeftJoinStr
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = NaturalJoinStr
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = NaturalLeftJoinStr
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.expr = nil
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.str = IsNullStr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = IsNotNullStr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = IsTrueStr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = IsNotTrueStr
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = IsFalseStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = IsNotFalseStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.str = EqualStr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.str = LessThanStr
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.str = GreaterThanStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.str = LessEqualStr
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.str = GreaterEqualStr
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.str = NotEqualStr
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.str = NullSafeNotEqualStr
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.expr = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1373
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1381
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_timestamp")}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_date")}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_time")}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.expr = nil
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.str = string("")
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &NullVal{}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.exprs = nil
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.orderBy = nil
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = AscScr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.str = AscScr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.str = DescScr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.limit = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1763
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.byt = 0
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.byt = 1
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = IgnoreStr
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2024
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			decNesting(yylex)
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2038
		{
			forceEOF(yylex)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2043
		{
			forceEOF(yylex)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			forceEOF(yylex)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
